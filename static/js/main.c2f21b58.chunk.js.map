{"version":3,"sources":["Header.js","Nav.js","Footer.js","Post.js","Feed.js","Home.js","NewPost.js","PostPage.js","EditPost.js","About.js","Missing.js","api/posts.js","App.js","index.js"],"names":["Header","_ref","title","react","className","Nav","search","setSearch","onSubmit","e","preventDefault","htmlFor","id","type","placeholder","value","onChange","target","react_router_dom","to","Footer","today","Date","getFullYear","Post","post","concat","datetime","body","length","slice","Feed","posts","map","src_Post","key","Home","src_Feed","style","marginTop","NewPost","handleSubmit","postTitle","setPostTitle","postBody","setPostBody","required","PostPage","handleDelete","useParams","find","toString","onClick","EditPost","handleEdit","editBody","setEditBody","editTitle","setEditTitle","useEffect","About","Missing","axios","create","baseURL","App","_useState","useState","_useState2","Object","slicedToArray","setPosts","_useState3","_useState4","_useState5","_useState6","searchResults","setSearchResults","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","history","useHistory","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","api","get","sent","data","t0","console","log","status","headers","message","stop","apply","this","arguments","fetchPosts","filteredResults","filter","toLowerCase","includes","reverse","_ref2","_callee2","newPost","allPosts","_context2","format","toConsumableArray","push","_x","_ref3","_callee3","updatedPost","_context3","put","objectSpread","_x2","_ref4","_callee4","postsList","_context4","delete","_x3","src_Header","src_Nav","react_router","exact","path","src_Home","src_NewPost","src_EditPost","src_PostPage","component","src_Footer","ReactDOM","render","react_default","createElement","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2f21b58.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nconst Header = ({ title }) => {\r\n    return (\r\n        <header className=\"Header\">\r\n            <h1>{title}</h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = ({ search, setSearch }) => {\r\n    return (\r\n        <nav className=\"Nav\">\r\n            <form className=\"searchForm\" onSubmit={(e)=>e.preventDefault()}>\r\n                <label htmlFor=\"search\">Search Posts</label>\r\n                <input\r\n                    id=\"search\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search Posts\"\r\n                    value={search}\r\n                    onChange={(e) => setSearch(e.target.value)}\r\n                />\r\n            </form>\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/post\">Post</Link></li>\r\n                <li><Link to=\"/about\">About</Link></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Nav;","import * as React from 'react';\r\n\r\nconst Footer = () => {\r\n    const today = new Date();\r\n\r\n    return (\r\n        <footer className=\"Footer\">\r\n            <p>Copyright &copy; {today.getFullYear()}</p>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer;","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Post = ({ post }) => {\r\n  return (\r\n    <article className='post'>\r\n        <Link to={`/post/${post.id}`}>\r\n            <h2>{post.title}</h2>\r\n            <p className='postDate'>{post.datetime}</p>\r\n        </Link>\r\n        {/* this link will take us to the individual post */}\r\n        <p className='postBody'>{\r\n            (post.body).length <= 25 \r\n                ? post.body\r\n                : `${(post.body).slice(0,25)}...`\r\n        }</p>\r\n        {/* if the post has less than 25 char it will show all, otherwise just show 25 char snippet.. */}\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Post","import * as React from 'react';\r\nimport Post from './Post';\r\n\r\nconst Feed = ({ posts }) => {\r\n  return (\r\n    <>\r\n        {posts.map(post => (\r\n            <Post key={post.id} post={post} />\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Feed","import * as React from 'react';\r\nimport Feed from \"./Feed\";\r\n\r\nconst Home = ({ posts }) => {\r\n    return (\r\n        <main className=\"Home\">\r\n            {posts.length ? (\r\n                <Feed posts={posts} />\r\n            ) : (\r\n                <p style={{marginTop: \"2rem\"}}>\r\n                    No posts to display\r\n                </p>\r\n            )}\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default Home;","import * as React from 'react';\r\n\r\nconst NewPost = ({\r\n    handleSubmit, postTitle, setPostTitle, postBody, setPostBody\r\n}) => {\r\n    return (\r\n        <main className=\"NewPost\">\r\n            <h2>New Post</h2>\r\n            <form className=\"newPostForm\" onSubmit={handleSubmit}>\r\n                <label htmlFor=\"postTitle\">Title:</label>\r\n                <input\r\n                    id=\"postTitle\"\r\n                    type=\"text\"\r\n                    required\r\n                    value={postTitle}\r\n                    onChange={(e) =>  setPostTitle(e.target.value)}\r\n                />\r\n                <label htmlFor=\"postBody\">Post:</label>\r\n                <textarea\r\n                    id=\"postBody\"\r\n                    required\r\n                    value={postBody}\r\n                    onChange={(e) => setPostBody(e.target.value)}\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default NewPost;","import * as React from 'react';\r\n\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nconst PostPage = ({ posts, handleDelete }) => {\r\n    const { id } = useParams();\r\n    //custom hook from router- an arguement that can be passed to a route- here the param/arg is id (as specified in route in app.js)\r\n    const post = posts.find(post => (post.id).toString() === id)\r\n    //this will find the indv post we want to display- need to make the id from data a string or use == instead of === bc the id from the route is a string\r\n    //SO.. useParams is taking the id (string) that is in the route and setting post var to the post with an id that matches the params id\r\n\r\n    return (\r\n        <main className='PostPage'>\r\n            <article className='post'>\r\n                {post && //if post is true THEN we will display this\r\n                    <>\r\n                        <h2>{post.title}</h2>\r\n                        <p className='postDate'>{post.datetime}</p>\r\n                        <p className='postBody'>{post.body}</p>\r\n                        <Link to={`/edit/${post.id}`}><button className='editButton'>Edit Post</button></Link>\r\n                        <button className='deleteButton' onClick={() => handleDelete(post.id)}>\r\n                            Delete Post\r\n                        </button>\r\n                    </>\r\n                }\r\n                {!post && //if post does not exist (is false) this will display\r\n                    <>\r\n                        <h2>Post Not Found</h2>\r\n                        <p>SORRY :/</p>\r\n                        <p><Link to=\"/\">Visit Our Homepage</Link></p>\r\n                    </>\r\n                }\r\n            </article>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default PostPage;  ","import * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nconst EditPost = ({\r\n    posts, handleEdit, editBody, setEditBody, editTitle, setEditTitle\r\n}) => {\r\n    const { id } = useParams(); //pulling the post detail from a parameter - gets the id attribvute set in the route\r\n    const post = posts.find(post => (post.id).toString() === id); //this will give us the post of the url id number\r\n\r\n    useEffect(() => {\r\n        if (post) {\r\n            setEditTitle(post.title);\r\n            setEditBody(post.body);\r\n        }\r\n    }, [post, setEditBody, setEditTitle])\r\n    //with this on page load the form will be filled out and ready to edit\r\n  return (\r\n    <main className=\"NewPost\">\r\n        {editTitle &&\r\n           <>\r\n                <h2>Edit Post</h2>\r\n                <form className=\"newPostForm\" onSubmit={(e) => e.preventDefault()}>\r\n                    <label htmlFor=\"postTitle\">Title:</label>\r\n                    <input\r\n                        id=\"postTitle\"\r\n                        type=\"text\"\r\n                        required\r\n                        value={editTitle}\r\n                        onChange={(e) =>  setEditTitle(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"postBody\">Post:</label>\r\n                    <textarea\r\n                        id=\"postBody\"\r\n                        required\r\n                        value={editBody}\r\n                        onChange={(e) => setEditBody(e.target.value)}\r\n                    />\r\n                    <button type=\"submit\" onClick={() => handleEdit(post.id)}>Submit</button>\r\n                </form>\r\n           </>\r\n        }\r\n        {!editTitle &&\r\n            <>\r\n                <h2>No Post Found</h2>\r\n                <p>sorry!</p>\r\n                <p>\r\n                    <Link to='/'>Visit Our Homepage</Link>\r\n                </p>\r\n            </>\r\n        }\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default EditPost;","import * as React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <main className=\"About\">\r\n            <h2>About</h2>\r\n            <p style={{marginTop: \"1rem\"}}>This is a simple blog app created with react.</p>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default About;","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Missing = () => {\r\n    return (\r\n        <main className='Missing'>\r\n            <h2>Page Not Found</h2>\r\n            <p>SORRY :/</p>\r\n            <p><Link to=\"/\">Visit Our Homepage</Link></p>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default Missing;","import axios from \"axios\";\r\n\r\n//set base url\r\nexport default axios.create({\r\n    baseURL: 'https://my-json-server.typicode.com/ktllama/blogdata'\r\n});\r\n\r\n//when you take a project live you would change your base url to whatever url you have from your host","/* eslint-disable no-unused-vars */\nimport * as React from 'react';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Footer from './Footer';\nimport Home from './Home';\nimport NewPost from './NewPost';\nimport PostPage from './PostPage';\nimport EditPost from './EditPost';\nimport About from './About';\nimport Missing from './Missing';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport api from './api/posts';\n\nfunction App() {\n\n  const [posts, setPosts] = useState([]);\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n  const [editTitle, setEditTitle] = useState('');\n  const [editBody, setEditBody] = useState('');\n  const history = useHistory();\n  \n  useEffect(() => {\n    const fetchPosts = async () => {\n      try{\n        const response = await api.get('/posts'); //posts is endpoint\n        setPosts(response.data); //json data is in .data - if unsure of what data wil return you can add if(response && response.data) and then set the posts\n      } catch (err) {\n        if (err.response) { //if the error response is defined\n          //not in 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else { //if response is not defined (possible no response or 404) just log the error message\n          console.log(`Error: ${err.message}`);\n\n        }\n      }\n    }\n\n    fetchPosts();\n  },[]) //loadtime data fetching axios function\n  //axios is easy to understand bc we use the verbs from CRUD- Get, Post, Put, Delete, Patch\n  //axios takes care of converting data to json\n  //it will also catch the errors for you when theyre not in the range of 200 http responses\n\n  useEffect(() => {\n    const filteredResults = posts.filter(post =>\n      ((post.body).toLowerCase()).includes(search.toLowerCase())\n      || ((post.title).toLowerCase()).includes(search.toLowerCase()));\n    //set both to lowercase so case doesnt matter\n    //filter the bodys that match the char in the search state\n    //use || or to look either through the body or title\n    setSearchResults(filteredResults.reverse());\n  },[posts, search])\n  //will filter the POSTS we have to match our SEARCH- thats why both dependencies\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    //define id for new post- need to find id of last post ( posts[posts.length-1] ) then reference id prop of that last post and add 1\n    const id = posts.length ? posts[posts.length - 1].id + 1 : 1;\n    //define date/time value with date-fns dependency\n    const datetime = format(new Date(), 'MMMM dd, yyyy pp');\n    //create new post (this object below)\n    const newPost = {id, title: postTitle, datetime, body: postBody};\n    //create a new array with all of the posts with spread operator and adding newPost \n    try {\n      const response = await api.post('/posts', newPost) //this will add the new post to the json file\n      const allPosts = [ ...posts, response.data ]; //this will update the posts to include the post you just added to the json file\n      setPosts(allPosts) //adding new post to state\n      setPostTitle('');  //resetting post title and body for next post add\n      setPostBody('');\n      //after submitting new post route user back to home page\n      history.push('/');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }\n\n  const handleEdit = async (id) => {\n    const datetime = format(new Date(), 'MMMM dd, yyyy pp');\n    const updatedPost = {id, title: editTitle, datetime, body: editBody};\n    try {\n      const response = await api.put(`/posts/${id}`, updatedPost);\n      setPosts(posts.map(post => post.id === id ? {...response.data } : post)); //only the id that matches the post we updated will be changed everything else will stay the same\n      setEditTitle('');\n      setEditBody('');\n      history.push('/');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }\n  //can use patch instead of put when updating specific fields\n  //with put you replace the entire post\n\n  const handleDelete = async (id) => {\n    try {\n      await api.delete(`/posts/${id}`) //this is how you delete- want to sent the id through to know which one to delete\n      const postsList = posts.filter(post => post.id !== id);\n      //returning a list of all posts except the one wil the id passed here as an argument- bc that would have been the id associated with the delete click that calls this function\n      setPosts(postsList);\n      history.push('/');\n      //now as a part of this function when you click the delete button it will serve the home component and route you there\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header title=\"React Blog\"/>\n      <Nav search={search} setSearch={setSearch} />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home posts={searchResults} />\n          </Route>\n          <Route exact path=\"/post\">\n            <NewPost \n              handleSubmit={handleSubmit}\n              postTitle={postTitle}\n              setPostTitle={setPostTitle}\n              postBody={postBody}\n              setPostBody={setPostBody}\n            />\n          </Route>\n          <Route path=\"/edit/:id\">\n            <EditPost \n              posts={posts}\n              handleEdit={handleEdit}\n              editTitle={editTitle}\n              setEditTitle={setEditTitle}\n              editBody={editBody}\n              setEditBody={setEditBody}\n            />\n          </Route>\n          <Route path=\"/post/:id\">\n            <PostPage posts={posts} handleDelete={handleDelete} />\n          </Route>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"*\" component={Missing} />\n        </Switch> \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Route path=\"/\" component={App} />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}